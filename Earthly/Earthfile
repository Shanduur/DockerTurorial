VERSION 0.6
FROM --platform=linux/amd64 ubuntu:jammy

deps:
    # install default dependencies
    RUN apt-get update && apt-get install -y \
        clang-format \
        cmake \
        curl \
        doxygen \
        git \
        graphviz \
        grep \
        gzip \
        lbzip2 \
        libfdt1 \
        libpixman-1-0 \
        libglib2.0-0 \
        make \
        openocd \
        python3 \
        python-is-python3 \
        unzip \
        xz-utils

tools:
    FROM +deps
    WORKDIR /tools

    # install ARM toolchain
    RUN curl \
            --silent \
            --show-error \
            --fail \
            --location \
            --output gcc-arm-none-eabi.tar.bz2 \
            https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz 
    RUN tar -xf gcc-arm-none-eabi.tar.bz2 -C /usr/share
    RUN ln -s /usr/share/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin/* /usr/bin/

    # install QEMU fork
    RUN curl \
            --silent \
            --show-error \
            --fail \
            --location \
            --output artifacts.zip \
            https://gitlab.com/api/v4/projects/33158668/jobs/artifacts/sat-master/download?job=amd64-qemu-system-arm-linux-container
    RUN unzip artifacts.zip
    RUN install qemu-system-arm /usr/bin/qemu-system-arm

    WORKDIR /repo

    COPY --dir \
        ./repo/cmake \
        ./repo/tools \
        .
    COPY \
        ./repo/.gdbinit \
        ./repo/CMakeLists.txt \
        ./repo/.clang-format \
        .

validate:
    FROM +tools
    RUN ls /usr/bin/ | grep -i arm

libs:
    FROM +tools
    WORKDIR /repo

    COPY --dir \
        ./repo/libs \
        .

code:
    FROM +libs
    COPY --dir \
        ./repo/firmware \
        .
    COPY --dir \
        ./repo/test \
        .

build:
    FROM +code

    # prepare build directory
    RUN mkdir build-fw

    # run build
    RUN cd build-fw && \
        cmake -D MCU=stm32l4 .. && \
        cmake --build .

    SAVE ARTIFACT build-fw
    SAVE ARTIFACT build-fw/firmware/firmware.elf
    SAVE ARTIFACT build-fw/firmware/firmware.map

test:
    FROM +build

    # run tests
    RUN cd build-fw && \
        ctest

firmware.elf:
    FROM scratch

    # copy artifacts
    COPY +build/firmware.elf .

    # export artifacts with the same names
    SAVE ARTIFACT firmware.elf AS LOCAL bin/firmware.elf
